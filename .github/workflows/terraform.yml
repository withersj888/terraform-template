name: Terraform Module CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.6.0'
  TFLINT_VERSION: 'v0.54.0'
  CHECKOV_VERSION: '3.1.34'

jobs:
  terraform-checks:
    name: Terraform Checks
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        terraform fmt -check -recursive
        if ($LASTEXITCODE -ne 0) {
          Write-Host "‚ùå Terraform files are not properly formatted" -ForegroundColor Red
          Write-Host "Run 'terraform fmt -recursive' to fix formatting issues" -ForegroundColor Yellow
          exit 1
        }

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: ${{ env.TFLINT_VERSION }}

    - name: Show TFLint version
      run: tflint --version

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint --format compact

    - name: Create reports directory
      run: New-Item -ItemType Directory -Path "reports" -Force

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif
        output_file_path: reports/checkov.sarif
        quiet: true
        compact: true

    - name: Upload Checkov results to GitHub Advanced Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('reports/checkov.sarif') != ''
      with:
        sarif_file: reports/checkov.sarif

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        format: sarif
        output_file: reports/tfsec.sarif
        soft_fail: true
        additional_args: --minimum-severity MEDIUM

    - name: Debug - List reports directory
      if: always()
      run: |
        Write-Host "Contents of reports directory:"
        if (Test-Path "reports") {
          Get-ChildItem -Path "reports" -Force
        } else {
          Write-Host "Reports directory not found"
        }

    - name: Upload tfsec results to GitHub Advanced Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('reports/tfsec.sarif') != ''
      with:
        sarif_file: reports/tfsec.sarif

  documentation:
    name: Documentation Check
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install terraform-docs
      run: |
        $version = "v0.17.0"
        $url = "https://terraform-docs.io/dl/$version/terraform-docs-$version-windows-amd64.zip"
        $tempDir = "terraform-docs-temp"

        try {
          # Download and extract to temporary directory
          Write-Host "Downloading terraform-docs $version..." -ForegroundColor Blue
          Invoke-WebRequest -Uri $url -OutFile "terraform-docs.zip"

          Write-Host "Extracting to temporary directory..." -ForegroundColor Blue
          New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
          Expand-Archive -Path "terraform-docs.zip" -DestinationPath $tempDir -Force

          # Copy only the executable to current directory
          Write-Host "Installing terraform-docs executable..." -ForegroundColor Blue
          Copy-Item -Path "$tempDir\terraform-docs.exe" -Destination "." -Force

          # Clean up temporary files
          Write-Host "Cleaning up temporary files..." -ForegroundColor Blue
          Remove-Item -Path "terraform-docs.zip" -Force
          Remove-Item -Path $tempDir -Recurse -Force

          # Add current directory to PATH and verify installation
          $env:PATH = "$PWD;$env:PATH"
          # Also set PATH for subsequent steps in the job
          "$PWD" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          Write-Host "Verifying installation..." -ForegroundColor Blue
          terraform-docs --version
          Write-Host "‚úÖ terraform-docs installed successfully!" -ForegroundColor Green
        }
        catch {
          Write-Host "‚ùå Failed to install terraform-docs: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

    - name: Render terraform docs
      run: |
        terraform-docs markdown table --config .terraform-docs.yml --output-mode inject --output-file TERRAFORM_DOCS.md .

    - name: Check if documentation is up to date
      run: |
        git diff --quiet HEAD -- TERRAFORM_DOCS.md
        if ($LASTEXITCODE -ne 0) {
          Write-Host "‚ùå Documentation is not up to date" -ForegroundColor Red
          Write-Host "Please run 'terraform-docs .' and commit the changes" -ForegroundColor Yellow
          git diff
          exit 1
        }

  terraform-tests:
    name: Terraform Tests
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Check for test files
      run: |
        Write-Host "üîç Checking for Terraform test files..." -ForegroundColor Blue
        $testFiles = @(Get-ChildItem -Path "tests" -Filter "*.tftest.hcl" -ErrorAction SilentlyContinue)

        if ($testFiles.Count -eq 0) {
          Write-Host "‚ùå No Terraform test files found in tests/ directory" -ForegroundColor Red
          Write-Host "Please add at least one .tftest.hcl file to ensure module quality" -ForegroundColor Yellow
          exit 1
        } else {
          Write-Host "‚úÖ Found $($testFiles.Count) test file(s)" -ForegroundColor Green
        }

    - name: Run Terraform Tests
      run: |
        Write-Host "üß™ Running Terraform native tests..." -ForegroundColor Blue
        terraform test -verbose

        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ All Terraform tests passed!" -ForegroundColor Green
        } else {
          Write-Host "‚ùå Some Terraform tests failed" -ForegroundColor Red
          exit 1
        }

    - name: Test Summary
      run: |
        Write-Host "üìä Test Summary:" -ForegroundColor Blue
        $testFiles = @(Get-ChildItem -Path "tests" -Filter "*.tftest.hcl")
        Write-Host "- Total test files: $($testFiles.Count)" -ForegroundColor White
        Write-Host "- Test execution: ‚úÖ Completed successfully" -ForegroundColor Green

  examples:
    name: Examples Validation
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    strategy:
      matrix:
        example: [basic, advanced]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init - ${{ matrix.example }}
      run: |
        if (Test-Path "examples/${{ matrix.example }}") {
          Set-Location "examples/${{ matrix.example }}"
          terraform init -backend=false
        } else {
          Write-Host "Example directory examples/${{ matrix.example }} does not exist, skipping"
          exit 0
        }

    - name: Terraform Validate - ${{ matrix.example }}
      run: |
        if (Test-Path "examples/${{ matrix.example }}") {
          Set-Location "examples/${{ matrix.example }}"
          terraform validate
        }

    - name: Terraform Plan - ${{ matrix.example }}
      run: |
        if (Test-Path "examples/${{ matrix.example }}") {
          Set-Location "examples/${{ matrix.example }}"
          terraform plan -input=false
        }

  release:
    name: Release
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    needs: [terraform-checks, documentation, terraform-tests, examples]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release
        npm install -g @semantic-release/changelog
        npm install -g @semantic-release/git

    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release
